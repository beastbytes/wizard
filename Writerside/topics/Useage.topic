<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Useage" id="Useage">
    <p>Wizard is used in a Controller; it uses a single action that all steps use to render and submit forms,
        greatly simplifying routing - there is only one route for a Wizard.</p>

    <code-block lang="php">
class MyController
{
    private const WIZARD_STEPS = ['step_1', 'step_2', 'step_3'];

    public function wizard(
            ServerRequestInterface $request,
            WizardInterface $wizard
    ): ResponseInterface
    {
        return $wizard
                -&gt;withEvents([
                    [$this, 'afterWizardHandler'],
                    [$this, 'stepHandler'],
                ])
                -&gt;withForwardOnly(Wizard::FORWARD_ONLY)
                -&gt;withSteps(self::WIZARD_STEPS)
                -&gt;step($request)
        ;
    }

    public function afterWizardHandler(AfterWizard $event)
    {
        // Handle AfterWizard event
    }

    public function stepHandler(Step $event)
    {
        // Handle AfterWizard event
    }
}
</code-block>
    <p>The above example does the following:</p>
    <list>
        <li>
            Declares the steps WIZARD_STEPS. There can be as many steps as needed and this array also
            defines branch options when Plot Branching Navigation (PBN) is used (more on PBN later).
        </li>
        <li>
            Declares an action (the <code>wizard()</code> method in this example). Like any other action,
            it's route must be defined in the router.
        </li>
        <li>
            The action sets the Wizard options, declares the events and their handlers,
            then calls <code>Wizard::step()</code> with the request.
        </li>
        <li>
            Declares the AfterWizard and Step event handlers.
        </li>
    </list>
</topic>